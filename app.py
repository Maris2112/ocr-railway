from flask import Flask, request, jsonify
import pytesseract
from PIL import Image, UnidentifiedImageError
import io
import base64
from pdf2image import convert_from_bytes
import cv2
import numpy as np
import fitz  # PyMuPDF
import os
import hashlib
import logging
import datetime
import traceback
from werkzeug.utils import secure_filename

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from langchain.embeddings import OpenAIEmbeddings
    from langchain.vectorstores import Qdrant
    from langchain.schema import Document
    from qdrant_client import QdrantClient
    from qdrant_client.http.models import Distance, VectorParams
    VECTOR_SEARCH_AVAILABLE = True
except ImportError:
    VECTOR_SEARCH_AVAILABLE = False
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'tiff', 'bmp'}
OCR_LANGUAGES = os.environ.get("OCR_LANGUAGES", "rus+eng")
COLLECTION_NAME = os.environ.get("QDRANT_COLLECTION", "dm_docs")
VECTOR_SIZE = 1536

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (20 –ú–ë)
app.config['MAX_CONTENT_LENGTH'] = 20 * 1024 * 1024

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_vars = []
if VECTOR_SEARCH_AVAILABLE:
    required_vars = ["OPENAI_API_KEY", "QDRANT_URL", "QDRANT_API_KEY"]
    
missing_vars = [var for var in required_vars if not os.environ.get(var)]
if missing_vars:
    logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}. "
                  f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route("/")
def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É")
    return "üëã OCR-—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç! Version 1.0.1"

@app.route("/health")
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    health_status = {
        "status": "healthy",
        "timestamp": datetime.datetime.now().isoformat(),
        "services": {
            "tesseract": "ok",
            "opencv": "ok",
            "vector_search": "disabled" if not VECTOR_SEARCH_AVAILABLE else "ok"
        },
        "environment": {
            "ocr_languages": OCR_LANGUAGES,
            "max_file_size_mb": app.config['MAX_CONTENT_LENGTH'] / (1024 * 1024)
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if VECTOR_SEARCH_AVAILABLE:
        for var in required_vars:
            health_status["services"][var.lower()] = "ok" if os.environ.get(var) else "missing"
    
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –º–µ–Ω—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if any(value != "ok" for service, value in health_status["services"].items() 
           if service not in ["vector_search"]):
        health_status["status"] = "degraded"
    
    return jsonify(health_status)

@app.route("/test_ocr", methods=["POST"])
def test_ocr():
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR"""
    if 'file' not in request.files:
        return jsonify({"status": "error", "message": "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"status": "error", "message": "–í—ã–±—Ä–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª"}), 400
    
    if not allowed_file(file.filename):
        return jsonify({
            "status": "error", 
            "message": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(ALLOWED_EXTENSIONS)}"
        }), 400
    
    try:
        image = Image.open(file.stream)
        text = pytesseract.image_to_string(image, lang=OCR_LANGUAGES)
        
        return jsonify({
            "status": "ok",
            "text": text,
            "languages": OCR_LANGUAGES
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OCR: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        }), 500

def preprocess_image(image, preprocessing_level="default"):
    """
    –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    :param image: PIL Image –æ–±—ä–µ–∫—Ç
    :param preprocessing_level: –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (default, light, aggressive)
    :return: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ numpy array
    """
    try:
        img = np.array(image.convert("RGB"))
        gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
        
        if preprocessing_level == "light":
            # –õ–µ–≥–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            blur = cv2.GaussianBlur(gray, (3, 3), 0)
            return blur
        
        elif preprocessing_level == "aggressive":
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            blur = cv2.GaussianBlur(gray, (5, 5), 0)
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
            thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                          cv2.THRESH_BINARY, 11, 2)
            # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
            kernel = np.ones((1, 1), np.uint8)
            opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
            return opening
        
        else:  # default
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            blur = cv2.GaussianBlur(gray, (3, 3), 0)
            _, thresh = cv2.threshold(blur, 150, 255, cv2.THRESH_BINARY)
            return thresh
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        logger.error(traceback.format_exc())
        raise

def extract_images_from_pdf(pdf_bytes):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF —Ñ–∞–π–ª–∞"""
    images = []
    try:
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        for page_num, page in enumerate(doc):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for img_index, img in enumerate(page.get_images(full=True)):
                try:
                    xref = img[0]
                    base_image = doc.extract_image(xref)
                    img_bytes = base_image["image"]
                    encoded = base64.b64encode(img_bytes).decode('utf-8')
                    images.append({
                        "image": encoded,
                        "page": page_num + 1,
                        "index": img_index
                    })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_index} —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
        logger.error(traceback.format_exc())
    
    return images

def init_qdrant():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Qdrant –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    if not VECTOR_SEARCH_AVAILABLE:
        raise ValueError("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    openai_key = os.environ.get("OPENAI_API_KEY")
    qdrant_url = os.environ.get("QDRANT_URL")
    qdrant_key = os.environ.get("QDRANT_API_KEY")
    
    if not openai_key:
        logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        raise ValueError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not qdrant_url:
        logger.error("QDRANT_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        raise ValueError("QDRANT_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not qdrant_key:
        logger.error("QDRANT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        raise ValueError("QDRANT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    embed_fn = OpenAIEmbeddings(openai_api_key=openai_key)
    raw_client = QdrantClient(url=qdrant_url, api_key=qdrant_key)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not raw_client.collection_exists(collection_name=COLLECTION_NAME):
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {COLLECTION_NAME}")
        raw_client.recreate_collection(
            collection_name=COLLECTION_NAME,
            vectors_config=VectorParams(size=VECTOR_SIZE, distance=Distance.COSINE),
        )
    
    client = Qdrant(
        url=qdrant_url,
        api_key=qdrant_key,
        prefer_grpc=False,
        embedding_function=embed_fn,
    )
    
    return client

@app.route("/ocr", methods=["POST"])
def ocr():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è OCR-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É /ocr")
        return jsonify({"status": "test", "message": "Simplified response"}), 200
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if 'file' not in request.files:
            logger.warning("–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω"}), 400
        
        file = request.files['file']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        if file.filename == '':
            logger.warning("–í—ã–±—Ä–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
            return jsonify({"error": "–í—ã–±—Ä–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if not allowed_file(file.filename):
            logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.filename}")
            return jsonify({
                "error": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(ALLOWED_EXTENSIONS)}"
            }), 400
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        preprocessing_level = request.form.get('preprocessing', 'default')
        ocr_options = request.form.get('ocr_options', 'normal')
        store_in_qdrant = request.form.get('store_in_qdrant', 'true').lower() == 'true'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Qdrant
        if store_in_qdrant and not VECTOR_SEARCH_AVAILABLE:
            logger.warning("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Qdrant, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            store_in_qdrant = False
        
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        filename = secure_filename(file.filename.lower())
        file_bytes = file.read()
        
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filename}, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)/1024:.2f} –ö–ë")
        
        results = []
        all_text = ""
        extracted_images = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
        if filename.endswith('.pdf'):
            try:
                logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É PDF")
                images = convert_from_bytes(file_bytes)
                logger.info(f"PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")
                
                for page_num, img in enumerate(images):
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num+1}/{len(images)}")
                    pre_img = preprocess_image(img, preprocessing_level)
                    
                    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OCR –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø—Ü–∏–π
                    config = ""
                    if ocr_options == "accurate":
                        config = "--oem 1 --psm 6"
                    elif ocr_options == "fast":
                        config = "--oem 0 --psm 3"
                    
                    text = pytesseract.image_to_string(pre_img, lang=OCR_LANGUAGES, config=config)
                    results.append({"page": page_num + 1, "text": text})
                    all_text += f"\n{text}"
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF
                logger.info("–ò–∑–≤–ª–µ–∫–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ PDF")
                extracted_images = extract_images_from_pdf(file_bytes)
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}")
                logger.error(traceback.format_exc())
                return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {str(e)}"}), 500
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        else:
            try:
                logger.info("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                image = Image.open(io.BytesIO(file_bytes))
                pre_img = preprocess_image(image, preprocessing_level)
                
                config = ""
                if ocr_options == "accurate":
                    config = "--oem 1 --psm 6"
                elif ocr_options == "fast":
                    config = "--oem 0 --psm 3"
                
                text = pytesseract.image_to_string(pre_img, lang=OCR_LANGUAGES, config=config)
                results.append({"page": 1, "text": text})
                all_text = text
                
                # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
                buffered = io.BytesIO()
                image.save(buffered, format=image.format if image.format else "JPEG")
                img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')
                extracted_images = [{"image": img_str, "page": 1, "index": 0}]
                
            except UnidentifiedImageError:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {filename}")
                return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}), 400
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                logger.error(traceback.format_exc())
                return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"}), 500
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞
        hash_id = hashlib.md5(all_text.encode('utf-8')).hexdigest()
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ö–µ—à –¥–æ–∫—É–º–µ–Ω—Ç–∞: {hash_id}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Qdrant, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if store_in_qdrant and VECTOR_SEARCH_AVAILABLE:
            try:
                logger.info("–ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Qdrant")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant
                client = init_qdrant()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                documents = [
                    Document(
                        page_content=page["text"],
                        metadata={
                            "page": page["page"],
                            "source": filename,
                            "hash": hash_id,
                            "file_type": os.path.splitext(filename)[1][1:],
                            "timestamp": datetime.datetime.now().isoformat(),
                        },
                    )
                    for page in results
                ]
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                client.add_documents(documents, collection_name=COLLECTION_NAME)
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {hash_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Qdrant")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Qdrant: {str(e)}")
                logger.error(traceback.format_exc())
                return jsonify({
                    "status": "partial_success",
                    "hash": hash_id,
                    "pages": len(results),
                    "text": results,
                    "images": extracted_images,
                    "error": f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Qdrant: {str(e)}"
                })
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        logger.info("–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return jsonify({
            "status": "ok",
            "hash": hash_id,
            "pages": len(results),
            "text": results,
            "images": extracted_images
        })
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"}), 500

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    debug_mode = os.environ.get("DEBUG", "False").lower() == "true"
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}, —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {debug_mode}")
    app.run(host="0.0.0.0", port=port, debug=debug_mode)
